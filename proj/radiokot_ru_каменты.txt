https://radiokot.ru/forum/viewtopic.php?f=57&t=184276&e=0

forregister84

//------------------------------------------------------------------------------
Версия 0.7
ШИМ-генератор с LCD и управлением кнопками

Возможно кому-нибудь пригодится

LCD 8х2 WH0802A или 16х2 WH1602A
Кнопка Mode - вкл/выкл выхода.
Кнопки Freq-, Freq+ изменение частоты. Шаг 1 Гц (10, 100 Гц).
Кнопки Duty-, Duty+ изменение коэффициента заполнения ШИМ. Шаг 1% (5%).
Если долго держать кнопку, шаг увеличивается.

Частота и ШИМ сохраняются в EEPROM через 2 сек после изменения частоты или ШИМ (чтобы не записывать слишком часто)
На низкой частоте используется делитель /8, /64, /256 

	Версия с одним каналом PB2: ATMega8_PWM_LCD
Частота: 1 Гц...1.6 МГц ((F_CPU/10)). Можно поднять до Fmax= F_CPU/4 по datasheet
Fast PWM Mode
Длительность импульса минимум 1 такт. ШИМ 1...99%

	Версия с двумя каналами PB1, PB2: ATMega8_PWM_2CH_LCD
Частота: 1 Гц...800 кГц ((F_CPU/20)). Fmax= F_CPU/8
Phase and Frequency Correct PWM Mode
Длительность импульса минимум 2 такта. ШИМ 1...50%

2-х канальный ШИМ сыроват и возможны глюки на высоких частотах
из-за особенностей ICR1.
Наверное лучше 1 канал ШИМ + схема деления на 2 канала: 74AC74 + 74AC08.

//------------------------------------------------------------------------------
ATMega8_PWM_LCD
  Версия 0.8 - исправлено в conv_period_freq(): не было перерасчета T1_OCR (OCR1B) при F>F_CPU/100 
Из-за этого коэффициент заполнения ШИМ сильно изменялся при изменении частоты и можно было получить даже 100 %.
(а должен слабо менятся, с учетом ограничений дискретности)
  Версия 0.81 - Кнопка Mode на PB0. Основные настройки в main.h. #define FREQ_MAX (F_CPU/4).
  Версия 0.82 - макс. шаг 10% периода при (Freq>FREQ_MAX_DF1Hz). 
Исправлен глюк при увеличении Freq до FREQ_MAX_DF1Hz+1. Нужно было нажать 2 раза для увеличения 4000 -> 4001 Гц

ATMega8_PWM_2CH_LCD - аналогичные исправления
 
ATMega8_PWM_LCD_E
  ШИМ-генератор с LCD, 2-мя энкодерами и кнопкой
  Версия 0.81 - Кнопка Mode на PB0. Шаг только 1 Гц/1 такт.
  Версия 0.82 - Шаг частоты 1/10/100/1000 Гц. Шаг ШИМ 0,01/ 0,1 / 1 / 5 %. Переключение кнопкой энкодера по кругу.
  (нужно добавить мигание соответствующего разряда неск. сек.)
  Версия 0.83 - исправлено: когда минимальный шаг 0,03% приходилось 3 раза крутить энкодер на 0,01%
//------------------------------------------------------------------------------
Стоит обратить внимание на расчеты в Excel. Дискретность 1 Гц возможна на частоте F<=sqrt(F_CPU)
Т.е. С кварцем 16 МГц дискретность 1 Гц до частоты 4 кГц.
С кварцем 1 МГц дискретность 1 Гц до частоты 1кГц.
При увеличении дискретности в 10 раз частота увеличивается в sqrt(10)=3,162 раз:
4 кГц -> 12,649 кГц -> 40 кГц


Также обратите внимание на зависимость максимальной частоты от напряжения питания (datasheet ATmega8A)
Figure 26-1. Maximum Frequency vs. Vcc
11.2.3 Brown-out Detection (сброс при понижении питания)
26.5 System and Reset Characteristics

Т.е. С кварцем 16 МГц минимум 4,5 В и с кварцем 8 МГц минимум 2,7 В.
  Поэтому фъюз BODEN=0, BODLEVEL=0 
//------------------------------------------------------------------------------
С моими энкодерами с подтягивающими резисторами 2 кОм лучше не стало. Если вручную быстро крутить дребезг все равно очень сильный.
(энкодеры старые взял с куском какой-то платы). Фильтр все равно нужен. Оставил 2 кОм т.к. это более корректно.

Макетка_ATMega8
https://img.radiokot.ru/files/150397/2xja9u4cf4.JPG

Осциллограммы:

Медленное вращение энкодера без фильтра
https://img.radiokot.ru/files/150397/2xjabdm61z.png

Быстрое:
https://img.radiokot.ru/files/150397/2xjabcupue.png
https://img.radiokot.ru/files/150397/2xjabddm5j.png
  На выходе фильтра:
https://img.radiokot.ru/files/150397/2xjabd4ruh.png
//------------------------------------------------------------------------------
veso74 - спасибо. Это табличный метод. Оставлю на потом.

добавлено мигание разряда при изменении шага.
//------------------------------------------------------------------------------
Уменьшены до минимума глитчи на ВЧ и НЧ при изменении частоты.
  Те, кто свято верит в "двойная буферизация записи в регистры сравнения"
не учитывают что между записью в OCR1A и OCR1B проходит 2 такта. В это время
может прийти конец периода и OCR1A обновится, а OCR1B обновится в следующем
периоде. Это приводит к глитчам, типа растягивание импульса на 2 периода и т.д.
Особенно неприятно, когда это происходит при резком изменении частоты, например 300 - 1300 Гц.
  Поэтому на низкой частоте запись в регистры в начале периода в прерывании.
На ВЧ шаг периода 1 такт и глитчи не более 1 такта.

2-х канальный ШИМ с энкодером будет позже.
//------------------------------------------------------------------------------
ATMega8_PWM_LCD_E_087_AS7
Небольшие исправления, ничего не меняющие, но быдлокодинга с TIFR и TIMSK меньше.

ATMega8_PWM_2CH_LCD_E_086a_AS7
2-х канальный ШИМ с энкодером:
Исправлено: при увеличении частоты ICR1 может быть меньше TCNT1 и тогда счетчик считает до 0xFFFF.
Исправлено с помощью записи 1 в TCNT1, что приводит к глитчу ВЧ.
Глитч НЧ при изменении делителя остался.
//------------------------------------------------------------------------------
Т.к. в прерываниях используются регистровые переменные прерывания должны быть 
запрещены во время выполнения математических  функций (libc.a)
https://www.avrfreaks.net/forum/solved-how-make-volatile-register-variable
El Tangas
I had to graph it. Here is the register usage of libc.a, avr25 version (only call-saved registers):

//------------------------------------------------------------------------------
Ребят, я немного о другом. LCD тормозит при пониженных температурах, также в datasheet упоминается, что напряжение регулировки контраста зависит от температуры.  Интересует опыт в этом вопросе.
Даже при +15 C уже тормозит и мигание при изменении шага было почти не видно.
